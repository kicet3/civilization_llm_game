"use client";

import React, { useState, useEffect, useCallback } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { cn } from '@/lib/utils';
import HexMap from './map-management/HexMap';
import ResearchPanel from './research-management/ResearchPanel';
import gameService from '@/services/gameService';
import { useToast } from './ui/useToast';
import { Send, Clock } from 'lucide-react';
import TurnManager, { TurnPhase } from './TurnManager';

interface LogEntry {
  type: 'system' | 'advisor' | 'event' | 'player';
  content: string;
  turn: number;
}

export default function GamePage() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [gameId, setGameId] = useState<string>('');
  const [userId, setUserId] = useState<string>('default-user-id');
  const [turn, setTurn] = useState<number>(1);
  const [phase, setPhase] = useState<TurnPhase>('player');
  
  // 로그 관련 상태
  const [log, setLog] = useState<LogEntry[]>([]);
  const [commandInput, setCommandInput] = useState<string>('');
  
  // 토스트 관련 코드
  const { showToast, ToastContainer } = useToast();
  
  // 탭 관련 코드
  const tabs = [
    { id: 'map', label: '맵', icon: '🌍' },
    { id: 'research', label: '연구', icon: '🔬' },
    { id: 'city', label: '도시', icon: '🏙️' },
    { id: 'diplomacy', label: '외교', icon: '🤝' },
    { id: 'culture', label: '문화', icon: '🎭' },
  ];
  
  // 현재 선택된 탭 상태 관리
  const [activeTab, setActiveTab] = useState('map');

  // 컴포넌트 마운트 시 게임 ID 및 유저 ID 확인
  useEffect(() => {
    // URL 파라미터에서 userId 확인
    const urlUserId = searchParams.get('userId');
    
    // 로컬 스토리지 접근은 클라이언트 사이드에서만 가능
    const storedUserId = typeof window !== 'undefined' ? localStorage.getItem('userId') : null;
    const finalUserId = urlUserId || storedUserId || 'default-user-id';
    
    // 유저 ID 설정 및 로컬 스토리지에 저장
    setUserId(finalUserId);
    if (typeof window !== 'undefined') {
      localStorage.setItem('userId', finalUserId);
    }
    
    // 로컬 스토리지에서 게임 ID 확인
    const storedGameId = typeof window !== 'undefined' ? localStorage.getItem('text_civ_game_id') : null;
    
    if (storedGameId) {
      setGameId(storedGameId);
      setIsLoading(false);
      
      // 초기 로그 메시지 추가
      addLog('system', '게임이 로드되었습니다.', turn);
      addLog('advisor', '문명의 지도자님, 환영합니다! 당신의 문명을 이끌어 승리하세요.', turn);
    } else {
      // 게임 ID가 없으면 게임 선택 페이지로 이동
      showToast({
        title: "게임 세션 없음",
        description: "진행 중인 게임을 찾을 수 없습니다. 새 게임을 시작해주세요.",
        variant: "destructive"
      });
      
      // 짧은 지연 후 리다이렉트
      setTimeout(() => {
        router.push('/game/select-mode');
      }, 2000);
    }
  }, [router, showToast, searchParams]);

  // 게임 로그 추가
  const addLog = useCallback((type: LogEntry['type'], content: string, currentTurn: number) => {
    setLog(prev => [...prev, { type, content, turn: currentTurn }]);
  }, []);

  // 턴 종료 처리
  const endTurn = useCallback(async () => {
    try {
      setPhase('resolve');
      addLog('system', `턴 ${turn} 종료! AI 처리 중...`, turn);
      showToast({
        title: "턴 종료",
        description: `턴 ${turn} 종료! AI 처리 중...`,
        variant: "default"
      });
      
      // TODO: 턴 종료 API 호출 및 이벤트 처리
      // 임시로 1초 후에 다음 턴으로 넘어가는 코드
      setTimeout(() => {
        setTurn(prev => prev + 1);
        setPhase('player');
        addLog('system', `턴 ${turn + 1} 시작`, turn + 1);
        showToast({
          title: "턴 시작",
          description: `턴 ${turn + 1} 시작`,
          variant: "default"
        });
      }, 1000);
    } catch (err) {
      setError(err instanceof Error ? err.message : '턴 처리 실패');
      showToast({
        title: "오류",
        description: '턴 처리 실패',
        variant: "destructive"
      });
      setPhase('player');
    }
  }, [turn, addLog, showToast]);

  // 명령어 입력 처리
  const handleCommand = (e: React.FormEvent) => {
    e.preventDefault();
    if (!commandInput.trim()) return;
    
    // 명령어 처리 로직
    addLog('player', commandInput, turn);
    
    // 명령어에 따른 처리 (간단한 예시)
    if (commandInput.toLowerCase().includes('턴 종료')) {
      endTurn();
    } else if (commandInput.toLowerCase().includes('도움말')) {
      addLog('system', '사용 가능한 명령어: 턴 종료, 도움말, 상태, 정보', turn);
    } else if (commandInput.toLowerCase().includes('상태')) {
      addLog('system', `현재 턴: ${turn}, 단계: ${phase}`, turn);
    } else {
      addLog('system', '인식할 수 없는 명령어입니다. "도움말"을 입력하여 사용 가능한 명령어를 확인하세요.', turn);
    }
    
    setCommandInput('');
  };

  // 현재 선택된 탭에 따른 컴포넌트 렌더링
  const renderTabContent = () => {
    if (isLoading) {
      return <div className="flex items-center justify-center h-full">로딩 중...</div>;
    }
    
    if (error) {
      return (
        <div className="flex flex-col items-center justify-center h-full">
          <div className="text-red-500 mb-4">{error}</div>
          <button
            className="px-4 py-2 bg-blue-600 rounded hover:bg-blue-700"
            onClick={() => router.push('/game/select-mode')}
          >
            게임 선택 페이지로 돌아가기
          </button>
        </div>
      );
    }
    
    switch (activeTab) {
      case 'map':
        return <HexMap gameId={gameId} userId={userId} />;
      case 'research':
        return <ResearchPanel gameId={gameId} userId={userId} />;
      case 'city':
        return <div className="p-4">도시 관리 패널 (개발 중)</div>;
      case 'diplomacy':
        return <div className="p-4">외교 패널 (개발 중)</div>;
      case 'culture':
        return <div className="p-4">문화 패널 (개발 중)</div>;
      default:
        return <div className="p-4">탭을 선택해주세요.</div>;
    }
  };

  return (
    <div className="h-screen w-screen flex flex-col bg-slate-900 text-white">
      {/* 상단 헤더 */}
      <header className="h-12 bg-slate-800 border-b border-slate-700 flex items-center px-4 justify-between">
        <h1 className="font-bold">Text Civilization</h1>
        <div className="flex items-center space-x-4">
          <div className="flex items-center mr-4">
            <Clock className="mr-1 text-blue-400" size={16} />
            <span className="font-bold">턴: {turn}</span>
          </div>
          <button 
            className="px-2 py-1 bg-red-700 hover:bg-red-800 rounded text-sm"
            onClick={() => {
              gameService.endGameSession();
              router.push('/game/select-mode');
            }}
          >
            게임 종료
          </button>
        </div>
      </header>
      
      {/* 메인 컨텐츠 */}
      <div className="flex-1 flex flex-col overflow-hidden">
        <div className="flex-1 flex overflow-hidden">
          {/* 왼쪽 탭 네비게이션 */}
          <div className="w-16 bg-slate-800 border-r border-slate-700 flex flex-col items-center py-4">
            {tabs.map((tab) => (
              <button
                key={tab.id}
                className={cn(
                  "w-12 h-12 mb-4 rounded-lg flex items-center justify-center",
                  activeTab === tab.id ? 'bg-indigo-600' : 'bg-slate-700 hover:bg-slate-600'
                )}
                onClick={() => setActiveTab(tab.id)}
                title={tab.label}
              >
                <span className="text-xl">{tab.icon}</span>
              </button>
            ))}
          </div>
          
          {/* 메인 컨텐츠 영역 */}
          <div className="flex-1 overflow-hidden">
            {renderTabContent()}
          </div>
        </div>
        
        {/* 하단 로그 및 명령 영역 */}
        <div className="h-[25vh] bg-slate-800 border-t border-slate-700 flex">
          {/* 로그 영역 */}
          <div className="flex-1 p-3 overflow-auto flex flex-col-reverse">
            <div className="space-y-3">
              {log.slice().reverse().map((entry: LogEntry, idx: number) => (
                <div key={idx} className={cn(
                  "p-2 rounded",
                  entry.type === 'system' ? 'bg-slate-700 text-gray-300' :
                  entry.type === 'advisor' ? 'bg-indigo-900' :
                  entry.type === 'event' ? 'bg-amber-900' : 'bg-slate-600'
                )}>
                  <div className="flex items-start">
                    <div className="text-sm">
                      {entry.type === 'system' && <span className="font-bold text-xs mr-1">[시스템]</span>}
                      {entry.type === 'advisor' && <span className="font-bold text-xs mr-1">[조언자]</span>}
                      {entry.type === 'event' && <span className="font-bold text-xs mr-1">[이벤트]</span>}
                      {entry.type === 'player' && <span className="font-bold text-xs mr-1">[명령]</span>}
                      {entry.content}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </div>
          
          {/* 명령 입력 영역 */}
          <div className="w-1/3 border-l border-slate-700 p-3 flex flex-col">
            <div className="flex-1 overflow-auto mb-3">
              <h4 className="font-bold mb-2">명령어 도움말</h4>
              <div className="text-sm space-y-1 text-gray-300">
                <p>- 턴 종료: 현재 턴을 종료하고 다음 턴으로 넘어갑니다.</p>
                <p>- 도움말: 사용 가능한 명령어를 보여줍니다.</p>
                <p>- 상태: 현재 게임 상태를 보여줍니다.</p>
              </div>
            </div>
            
            {/* 명령 입력 */}
            <form onSubmit={handleCommand} className="flex">
              <input
                type="text"
                value={commandInput}
                onChange={(e) => setCommandInput(e.target.value)}
                placeholder="명령을 입력하세요..."
                className="flex-1 bg-slate-700 rounded-l p-2 focus:outline-none"
              />
              <button 
                type="submit"
                className="bg-indigo-600 hover:bg-indigo-700 px-4 rounded-r flex items-center"
              >
                <Send size={16} />
              </button>
            </form>
          </div>
        </div>
      </div>
      
      {/* 토스트 컨테이너 */}
      <ToastContainer />
    </div>
  );
}