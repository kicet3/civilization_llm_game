// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-py"
  enable_experimental_decimal = "true"
  interface = "asyncio"
  recursive_type_depth = "5"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 1. 사용자 및 세션 모델
model User {
  id            Int           @id @default(autoincrement())
  username      String        @unique @db.VarChar(50)
  password_hash String        @db.Text
  created_at    DateTime      @db.DateTime()
  
  game_sessions GameSession[] @relation("HostedGames")
  players       Player[]
}

model GameSession {
  id              String        @id @default(uuid()) @db.Char(36)
  host_user_id    Int
  host_user       User          @relation("HostedGames", fields: [host_user_id], references: [id])
  map_type        String        @db.Text
  seed            BigInt
  current_turn    Int           @default(1)
  current_player  Int
  status          String        @default("ongoing") @db.VarChar(20)
  created_at      DateTime
  updated_at      DateTime      @updatedAt
  
  players         Player[]
  hexagons        Hexagon[]
  cities          City[]
  units           Unit[]
  game_research   GameResearch?
  game_policies   GamePolicies?
  game_religion   GameReligion?
  game_events     GameEvent[]
  civ_relations   CivRelation[]
  city_state_relations CityStateRelation[]
}

// 2. 플레이어 정보 모델
model Player {
  id            Int         @id @default(autoincrement())
  session_id    String      @db.Char(36)
  user_id       Int
  civ_type      String      @db.VarChar(50)
  is_ai         Boolean     @default(false) @db.TinyInt
  player_index  Int
  
  game_session  GameSession @relation(fields: [session_id], references: [id])
  user          User        @relation(fields: [user_id], references: [id])
  cities        City[]
  units         Unit[]
  
  source_relations      CivRelation[] @relation("SourcePlayer")
  target_relations      CivRelation[] @relation("TargetPlayer")
  city_state_relations  CityStateRelation[]
  
  @@unique([session_id, player_index], name: "ux_player_order")
}

// 3. 메타데이터 모델
model Tech {
  id            String            @id @db.VarChar(50)
  name          String            @db.VarChar(100)
  era           String?           @db.VarChar(50)
  cost          Int
  description   String?           @db.Text
  
  game_research GameResearch[]
  researched_techs ResearchedTech[]
  research_progress ResearchProgress[]
}

model Policy {
  id            String           @id @db.VarChar(50)
  name          String           @db.VarChar(100)
  tree          String           @db.VarChar(50)
  culture_cost  Int
  effect_json   Json?
  
  adopted_policies AdoptedPolicy[]
}

model Doctrine {
  id            String             @id @db.VarChar(50)
  name          String             @db.VarChar(100)
  tier          Int
  effect_json   Json?
  
  selected_doctrines SelectedDoctrine[]
}

model UnitType {
  id              String    @id @db.VarChar(50)
  name            String    @db.VarChar(100)
  category        String?   @db.VarChar(50)
  move            Int?
  combat_strength Int?
  range           Int?
  
  units           Unit[]
}

model Terrain {
  id            String      @id @db.VarChar(50)
  name          String      @db.VarChar(100)
  yield_json    Json?
  
  hexagons      Hexagon[]
}

model Resource {
  id            String      @id @db.VarChar(50)
  name          String      @db.VarChar(100)
  type          String      @db.VarChar(50)
  
  hexagons      Hexagon[]
}

// 4. 맵/타일 상태 모델
model Hexagon {
  session_id    String      @db.Char(36)
  q             Int
  r             Int
  s             Int
  terrain_id    String?     @db.VarChar(50)
  resource_id   String?     @db.VarChar(50)
  city_id       Int?
  unit_id       Int?
  
  game_session  GameSession @relation(fields: [session_id], references: [id])
  terrain       Terrain?    @relation(fields: [terrain_id], references: [id])
  resource      Resource?   @relation(fields: [resource_id], references: [id])
  
  @@id([session_id, q, r, s])
}

// 5. 도시 상태 모델
model City {
  id                     Int               @id @default(autoincrement())
  session_id             String            @db.Char(36)
  name                   String            @db.VarChar(100)
  owner_player_id        Int
  population             Int
  turns_left             Int?
  food                   Int?
  gold                   Int?
  science                Int?
  culture                Int?
  faith                  Int?
  happiness              Int?
  hp                     Int?
  defense                Int?
  garrisoned_unit_id     Int?
  food_to_next_pop       Int?
  culture_to_next_border Int?
  specialization         String?           @db.VarChar(50)
  updated_at             DateTime          @updatedAt
  
  game_session           GameSession       @relation(fields: [session_id], references: [id])
  owner                  Player            @relation(fields: [owner_player_id], references: [id])
  production_queue       ProductionQueue[]
}

model ProductionQueue {
  id           Int     @id @default(autoincrement())
  city_id      Int
  item_name    String  @db.VarChar(100)
  turns_left   Int
  queue_order  Int
  
  city         City    @relation(fields: [city_id], references: [id])
}

// 6. 유닛 상태 모델
model Unit {
  id                Int           @id @default(autoincrement())
  session_id        String        @db.Char(36)
  owner_player_id   Int
  unit_type_id      String        @db.VarChar(50)
  hp                Int?
  movement          Int?
  max_movement      Int?
  status            String?       @db.VarChar(50)
  loc_q             Int?
  loc_r             Int?
  loc_s             Int?
  
  game_session      GameSession   @relation(fields: [session_id], references: [id])
  owner             Player        @relation(fields: [owner_player_id], references: [id])
  unit_type         UnitType      @relation(fields: [unit_type_id], references: [id])
}

// 7. 연구 상태 모델
model GameResearch {
  session_id       String            @id @db.Char(36)
  current_tech_id  String?           @db.VarChar(50)
  
  game_session     GameSession       @relation(fields: [session_id], references: [id])
  current_tech     Tech?             @relation(fields: [current_tech_id], references: [id])
  
  researched_techs ResearchedTech[]
  research_progress ResearchProgress[]
}

model ResearchedTech {
  session_id    String        @db.Char(36)
  tech_id       String        @db.VarChar(50)
  
  game_research GameResearch  @relation(fields: [session_id], references: [session_id])
  tech          Tech          @relation(fields: [tech_id], references: [id])
  
  @@id([session_id, tech_id])
}

model ResearchProgress {
  session_id    String        @db.Char(36)
  tech_id       String        @db.VarChar(50)
  progress      Int
  
  game_research GameResearch  @relation(fields: [session_id], references: [session_id])
  tech          Tech          @relation(fields: [tech_id], references: [id])
  
  @@id([session_id, tech_id])
}

// 8. 정책 상태 모델
model GamePolicies {
  session_id      String          @id @db.Char(36)
  culture         Int
  
  game_session    GameSession     @relation(fields: [session_id], references: [id])
  adopted_policies AdoptedPolicy[]
}

model AdoptedPolicy {
  session_id     String         @db.Char(36)
  policy_id      String         @db.VarChar(50)
  
  game_policies  GamePolicies   @relation(fields: [session_id], references: [session_id])
  policy         Policy         @relation(fields: [policy_id], references: [id])
  
  @@id([session_id, policy_id])
}

// 9. 종교 상태 모델
model GameReligion {
  session_id        String              @id @db.Char(36)
  faith             Int
  
  game_session      GameSession         @relation(fields: [session_id], references: [id])
  founded_religions FoundedReligion[]
  selected_doctrines SelectedDoctrine[]
}

model FoundedReligion {
  session_id      String        @db.Char(36)
  religion_name   String        @db.VarChar(100)
  founder         String?       @db.VarChar(100)
  
  game_religion   GameReligion  @relation(fields: [session_id], references: [session_id])
  
  @@id([session_id, religion_name])
}

model SelectedDoctrine {
  session_id      String        @db.Char(36)
  doctrine_id     String        @db.VarChar(50)
  
  game_religion   GameReligion  @relation(fields: [session_id], references: [session_id])
  doctrine        Doctrine      @relation(fields: [doctrine_id], references: [id])
  
  @@id([session_id, doctrine_id])
}

// 10. 외교 상태 모델
model CivRelation {
  session_id        String        @db.Char(36)
  player_id         Int
  target_player_id  Int
  status            String?       @db.VarChar(20)
  relation_value    Int?
  
  game_session      GameSession   @relation(fields: [session_id], references: [id])
  player            Player        @relation("SourcePlayer", fields: [player_id], references: [id])
  target_player     Player        @relation("TargetPlayer", fields: [target_player_id], references: [id])
  
  @@id([session_id, player_id, target_player_id])
}

model CityStateRelation {
  session_id      String        @db.Char(36)
  city_state_id   Int
  player_id       Int
  influence       Int?
  is_allied       Boolean?      @db.TinyInt
  
  game_session    GameSession   @relation(fields: [session_id], references: [id])
  player          Player        @relation(fields: [player_id], references: [id])
  
  @@id([session_id, city_state_id, player_id])
}

// 11. 로그 & 이벤트 모델
model GameEvent {
  id            Int           @id @default(autoincrement())
  session_id    String        @db.Char(36)
  turn_number   Int?
  event_type    String?       @db.VarChar(50)
  event_data    Json?
  created_at    DateTime      @default(now())
  
  game_session  GameSession   @relation(fields: [session_id], references: [id])
}